{"version":3,"sources":["Theme.js","CheckboxInput.js","Tree.js","util/getAllChildNodes.js","sample/tree-data.js","index.js"],"names":["colors","light","medium","dark","CheckboxInput","props","react_default","a","createElement","name","type","checked","isChecked","onChange","library","add","faCaretRight","faCaretDown","TreeWrapper","styled","div","_templateObject","TreeNodeWrapper","_templateObject2","depth","ContentWrapper","_templateObject3","offset","hasChildren","concat","SelectAllWrapper","_templateObject4","CaptionWrapper","_templateObject5","Tree","_useState","useState","_useState2","Object","slicedToArray","selectedNodes","updateSelectedNodes","_useState3","_useState4","toggle","setToggleState","updateCheckbox","checkedItem","data","item","selectAll","allChildNodes","treeData","selectedNode","arguments","length","undefined","R","allNodes","traverseTree","tree","i","objectSpread","defineProperty","id","childList","getAllChildNodes","target","toConsumableArray","react","src_CheckboxInput","isIndeterminate","renderNodes","childNodes","map","toggledNodeState","checkbox","nodeIcon","react_fontawesome_index_es","icon","style","paddingRight","key","onClick","stateHash","updatedState","toggleState","caption","rootElement","document","getElementById","ReactDOM","render","src_Tree","sampleData"],"mappings":"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","file":"static/js/main.7872a8f8.chunk.js","sourcesContent":["export const colors = {\n    navy: {\n        light: \"#506973\",\n        medium: \"#40545c\",\n        dark: \"#303f45\",\n    },\n    apricot: {\n        light: \"#ee9065\",\n        medium: \"#be7350\",\n        dark: \"#8e563c\",\n    },\n    osloGray: {\n        light: \"#8b8c90\",\n        medium: \"#6f7073\",\n        dark: \"#535456\",\n    },\n    valencia: {\n        light: \"#faefed\",\n        medium: \"#d75338\",\n        dark: \"#7f2b18\",\n    },\n    cascadeBlue: {\n        light: \"#56a7e1\",\n        medium: \"#4485b4\",\n        dark: \"#336487\",\n    },\n    bayleaf: {\n        light: \"#7eb98d\",\n        medium: \"#649470\",\n        dark: \"#4b6f54\",\n    },\n    cascadeGreen: {\n        light: \"#58a618\",\n        medium: \"#468413\",\n        dark: \"#34630e\",\n    },\n    black: {\n        light: \"#000000\",\n        medium: \"#000000\",\n        dark: \"#000000\",\n    },\n    white: {\n        light: \"#ffffff\",\n        medium: \"#ffffff\",\n        dark: \"#ffffff\",\n    },\n    riverbed: {\n        light: \"#425760\",\n        medium: \"#34454c\",\n        dark: \"#273439\",\n    },\n    athensGray: {\n        light: \"#edeff3\",\n        medium: \"#bdbfc3\",\n        dark: \"#8e8f91\",\n    },\n    silverSand: {\n        light: \"#efefed\",\n        medium: \"#bfbfbd\",\n        dark: \"#8f8f8f\",\n    },\n    whiteSmoke: {\n        light: \"#f5f5f5\",\n        medium: \"#c4c4c4\",\n        dark: \"#939393\",\n    },\n    poloBlue: {\n        light: \"#91aad2\",\n        medium: \"#7488a8\",\n        dark: \"#57667e\",\n    },\n    shakespeare: {\n        light: \"#6aa5b7\",\n        medium: \"#548492\",\n        dark: \"#3f636d\",\n    },\n    carrotOrange: {\n        light: \"#f89a1c\",\n        medium: \"#c67b16\",\n        dark: \"#955d10\",\n    },\n    amber: {\n        light: \"#ffbf00\",\n        medium: \"#cc9800\",\n        dark: \"#997200\",\n    },\n};\n\nexport const semanticColors = {\n    default: {\n        standard: colors.osloGray.light,\n        hover: colors.osloGray.medium,\n        active: colors.osloGray.dark,\n    },\n    primary: {\n        standard: colors.apricot.light,\n        hover: colors.apricot.medium,\n        active: colors.apricot.dark,\n    },\n    info: {\n        standard: colors.navy.light,\n        hover: colors.navy.medium,\n        active: colors.navy.dark,\n    },\n    danger: {\n        standard: colors.valencia.medium,\n        hover: colors.valencia.dark,\n        active: colors.valencia.dark,\n    },\n    warning: {\n        standard: colors.amber.light,\n        hover: colors.amber.medium,\n        active: colors.amber.dark,\n    },\n    secondary: {\n        standard: colors.cascadeBlue.light,\n        hover: colors.cascadeBlue.medium,\n        active: colors.cascadeBlue.dark,\n    },\n    success: {\n        standard: colors.bayleaf.light,\n        hover: colors.bayleaf.medium,\n        active: colors.bayleaf.dark,\n    },\n    silverSand: {\n        standard: colors.silverSand.light,\n        hover: colors.silverSand.light,\n        active: colors.silverSand.dark,\n    },\n};\n","import React from \"react\";\n\nconst CheckboxInput = (props) => {\n    return (\n        <input\n            name=\"isGoing\"\n            type=\"checkbox\"\n            checked={props.isChecked}\n            onChange={props.onChange}\n        />\n    );\n};\n\nexport default CheckboxInput;\n","import React, { Fragment, useState } from \"react\";\nimport styled from \"styled-components\";\nimport * as R from \"ramda\";\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretRight, faCaretDown } from '@fortawesome/free-solid-svg-icons'\n\nimport { colors } from \"./Theme\";\nimport CheckboxInput from \"./CheckboxInput\";\nimport getAllChildNodes from \"./util/getAllChildNodes\";\n\nlibrary.add(faCaretRight);\nlibrary.add(faCaretDown);\n\nconst TreeWrapper = styled.div`\n  font-family: Roboto, sans-serif;\n  border: 1px solid ${colors.whiteSmoke.medium};\n  max-height: 300px;\n  overflow: auto;\n  background-color: ${colors.white.medium};\n  position: absolute;\n  z-index: 100;\n  width: 50%;\n  top: auto;\n`;\n\nconst TreeNodeWrapper = styled.div`\n  padding: 5px 15px 5px 20px;\n  white-space: nowrap;\n  //height: 30px;\n  cursor: pointer;\n  background-color: ${props => {\n    if (props.depth === 0) {\n        return colors.whiteSmoke.light;\n    }\n    return colors.white.medium;\n}};\n  border-bottom: 1px solid ${colors.whiteSmoke.medium};\n  &:hover {\n    background-clip: padding-box;\n    background-color: ${props => {\n    if (props.depth === 0) {\n        return colors.white.medium;\n    }\n    return colors.whiteSmoke.light;\n}};\n  }\n`;\n\nconst ContentWrapper = styled.div`\n  padding-left: ${props => {\n        const offset = props.hasChildren ? 0 : 20;\n        return `${20 * props.depth + offset}px`;\n    }};\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  font-weight: 400;\n  font-size: 14px;\n  color: ${colors.black.dark};\n  i {\n    padding-right: 20px;\n  }\n`;\n\nconst SelectAllWrapper = styled.div`\n  padding: 5px 15px 5px 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  font-weight: 400;\n  font-size: 14px;\n  color: ${colors.black.dark};\n  background-color: ${colors.whiteSmoke.light};\n  border-bottom: 1px solid ${colors.whiteSmoke.medium};\n  &:hover {\n    background-clip: padding-box;\n    background-color: ${colors.white.medium};\n  }\n`;\n\nconst CaptionWrapper = styled.div`\n  flex-basis: 90%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: clip;\n`;\n\nconst Tree = (props) => {\n    const [selectedNodes, updateSelectedNodes] = useState({});\n    const [toggle, setToggleState] = useState({});\n\n    function toggleState(id, stateHash) {\n        const updatedState = {\n            [stateHash]: {\n                ...toggle[stateHash],\n                ...{ [id]: !R.pathOr(false, [stateHash, id], toggle) }\n            }\n        };\n\n        return setToggleState(updatedState);\n    }\n\n    function updateCheckbox(checkedItem) {\n        return (data, item, selectAll) => {\n            const allChildNodes = getAllChildNodes(data, item, selectAll);\n\n            updateSelectedNodes(\n                checkedItem.target.checked\n                    ? { ...selectedNodes, ...{ [item.id]: item }, ...allChildNodes }\n                    : R.omit([item.id, ...R.keys(allChildNodes)], selectedNodes)\n            );\n        };\n    }\n\n    function renderNodes(data = [], depth = 0) {\n        let childNodes;\n\n        if (R.isEmpty(data)) {\n            return null;\n        }\n\n        return data.map(item => {\n            const childList = R.propOr([], \"childList\", item);\n            const toggledNodeState = R.pathOr(false, [\"toggledNodes\", item.id], toggle);\n\n            const selectedNode = !R.isEmpty(childList) && toggledNodeState;\n\n            childNodes = selectedNode ? renderNodes(childList, depth + 1) : null;\n\n            const hasChildren = !R.isEmpty(childList);\n\n            const checkbox = (\n                <CheckboxInput\n                    id={item.id}\n                    isChecked={R.has(item.id, selectedNodes)}\n                    isIndeterminate={false}\n                    onChange={(checkedItem) => updateCheckbox(checkedItem)(data, item)}\n                />\n            );\n\n            const nodeIcon = toggledNodeState\n                ? <FontAwesomeIcon icon=\"caret-down\" style={{paddingRight: '15px'}} />\n                : <FontAwesomeIcon icon=\"caret-right\" style={{paddingRight: '15px'}} />;\n\n            return (\n                <Fragment key={item.id}>\n                    <TreeNodeWrapper depth={depth}>\n                        <ContentWrapper depth={depth} hasChildren={hasChildren}>\n                            <CaptionWrapper onClick={() => toggleState(item.id, \"toggledNodes\")}>\n                                {hasChildren ? nodeIcon : null}{item.caption}\n                            </CaptionWrapper>\n                            <div>{checkbox}</div>\n                        </ContentWrapper>\n                    </TreeNodeWrapper>\n                    {childNodes}\n                </Fragment>\n            );\n        });\n    }\n\n    return (\n        <Fragment>\n            <TreeWrapper>\n                <SelectAllWrapper>\n                    Select All\n                    <CheckboxInput\n                        id=\"selectAll\"\n                        isIndeterminate={false}\n                        onChange={(checkedItem) => updateCheckbox(checkedItem)(props.data, {}, true)}\n                    />\n                </SelectAllWrapper>\n\n                {renderNodes(props.data)}\n            </TreeWrapper>\n        </Fragment>\n    );\n};\n\nexport default Tree;\n","import * as R from \"ramda\";\n\n/**\n * Given a predicate node, find all the child nodes.\n * @param treeData - [ { id: foo, childList: [{ id: bar }, { id: bloop }] } ]\n * @param selectedNode - { id: bar }\n * @param selectAll - bool\n */\nexport default function getAllChildNodes(treeData, selectedNode, selectAll=false) {\n    if (R.isNil(treeData) || R.isEmpty(treeData)) {\n        return {};\n    }\n\n    if ((R.isNil(selectedNode) || R.isEmpty(selectedNode)) && !selectAll) {\n        return {};\n    }\n\n    let allNodes = {};\n\n    function traverseTree(tree) {\n        for (let i = 0; i < tree.length; i += 1) {\n            allNodes = { ...allNodes, ...{ [tree[i].id]: tree[i] } };\n\n            if (R.has(\"childList\", tree[i])) {\n                traverseTree(tree[i].childList);\n            }\n        }\n        return allNodes;\n    }\n\n    if (selectAll) {\n        return traverseTree(treeData);\n    }\n\n    return R.has(\"childList\", selectedNode) ? traverseTree(selectedNode.childList) : allNodes;\n}\n","const data = [\n    {\n        \"id\": \"wave:100\",\n        \"caption\": \"Wave\",\n        \"childList\": [\n            {\n                \"id\": \"kitten:101\",\n                \"caption\": \"Kitten\",\n                \"childList\": [\n                    {\n                        \"id\": \"sound:102\",\n                        \"caption\": \"Sound\",\n                        \"childList\": [\n                            {\n                                \"id\": \"harmony:122\",\n                                \"caption\": \"Harmony\",\n                                \"childList\": [\n                                    {\n                                        \"id\": \"roll:123\",\n                                        \"caption\": \"Roll\",\n                                    },\n                                    {\n                                        \"id\": \"cable:124\",\n                                        \"caption\": \"Cable\",\n                                    },\n                                    {\n                                        \"id\": \"wine:125\",\n                                        \"caption\": \"Wine\",\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        \"id\": \"glove:103\",\n                        \"caption\": \"Glove\",\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"id\": \"love:104\",\n        \"caption\": \"Love\",\n        \"childList\": [\n            {\n                \"id\": \"bird:105\",\n                \"caption\": \"Bird\",\n                \"childList\": [\n                    {\n                        \"id\": \"feet:106\",\n                        \"caption\": \"Feet\",\n                    },\n                    {\n                        \"id\": \"powder:107\",\n                        \"caption\": \"Powder\",\n                    }\n                ]\n            },\n            {\n                \"id\": \"snow:108\",\n                \"caption\": \"Snow\",\n                \"childList\": [\n                    {\n                        \"id\": \"front:109\",\n                        \"caption\": \"Front\",\n                    },\n                    {\n                        \"id\": \"chair:110\",\n                        \"caption\": \"Chair\",\n                    },\n                    {\n                        \"id\": \"railway:111\",\n                        \"caption\": \"Railway\",\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"id\": \"smash:112\",\n        \"caption\": \"Smash\",\n        \"childList\": []\n    },\n    {\n        \"id\": \"farmer:113\",\n        \"caption\": \"Farmer\",\n        \"childList\": []\n    },\n    {\n        \"id\": \"birthday:114\",\n        \"caption\": \"Birthday\",\n        \"childList\": [\n            {\n                \"id\": \"car:115\",\n                \"caption\": \"Car\",\n                \"childList\": [\n                    {\n                        \"id\": \"twist:116\",\n                        \"caption\": \"Twist\",\n                    },\n                    {\n                        \"id\": \"icicle:117\",\n                        \"caption\": \"Icicle\",\n                    }\n                ]\n            },\n            {\n                \"id\": \"society:118\",\n                \"caption\": \"Society\",\n                \"childList\": [\n                    {\n                        \"id\": \"amusement:119\",\n                        \"caption\": \"Amusement\",\n                    },\n                    {\n                        \"id\": \"comparison:120\",\n                        \"caption\": \"Comparison\",\n                    },\n                    {\n                        \"id\": \"company:121\",\n                        \"caption\": \"Company\",\n                    }\n                ]\n            }\n        ]\n    },\n];\n\nexport default data;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Tree from \"./Tree\";\nimport sampleData from './sample/tree-data';\nimport \"./styles.css\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n    <Tree data={sampleData}/>,\n    rootElement\n);\n"],"sourceRoot":""}